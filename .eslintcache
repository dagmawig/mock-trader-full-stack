[{"C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\index.js":"1","C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\reportWebVitals.js":"2","C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\App.js":"3","C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\StateWrap.js":"4","C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\Reducer.js":"5","C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\Login.js":"6","C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\FirebaseConfig.js":"7","C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\Header.js":"8","C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\Home.js":"9","C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\Footer.js":"10","C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\Search.js":"11","C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\History.js":"12","C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\Loading.js":"13"},{"size":695,"mtime":1611200846927,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1609636537556,"results":"16","hashOfConfig":"15"},{"size":1792,"mtime":1613369024108,"results":"17","hashOfConfig":"15"},{"size":521,"mtime":1613364768875,"results":"18","hashOfConfig":"15"},{"size":1862,"mtime":1613364089932,"results":"19","hashOfConfig":"15"},{"size":3425,"mtime":1613369921612,"results":"20","hashOfConfig":"15"},{"size":663,"mtime":1611427051089,"results":"21","hashOfConfig":"15"},{"size":2187,"mtime":1613370456841,"results":"22","hashOfConfig":"15"},{"size":5933,"mtime":1613363723616,"results":"23","hashOfConfig":"15"},{"size":1055,"mtime":1612026683094,"results":"24","hashOfConfig":"15"},{"size":25523,"mtime":1613364697226,"results":"25","hashOfConfig":"15"},{"size":3688,"mtime":1613363337777,"results":"26","hashOfConfig":"15"},{"size":578,"mtime":1613363774138,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1fgk727",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\index.js",[],["61","62"],"C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\reportWebVitals.js",[],"C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\App.js",["63"],"import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport './App.css';\nimport Login from './components/Login';\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport Footer from './components/Footer';\nimport Search from './components/Search';\nimport History from './components/History';\nimport Loading from './components/Loading';\nimport { useEffect } from 'react';\n\nfunction App() {\n\n  let homePage;\n\n  if (localStorage.getItem(\"userID\")) {\n    homePage = (\n      <>\n        <Header />\n        <Loading />\n        <Home />\n        <Footer />\n      </>\n    )\n  }\n  else {\n    homePage = (\n      <>\n        <Loading />\n        <Login />\n      </>\n    )\n  }\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/search\">\n            {(localStorage.getItem(\"userID\")) ?\n              <>\n                <Header />\n                <Loading />\n                <Search />\n                <Footer />\n              </> :\n              <div>Page access not authorized!</div>\n            }\n          </Route>\n          <Route path=\"/history\">\n            {(localStorage.getItem(\"userID\")) ?\n              <>\n                <Header />\n                <Loading />\n                <History />\n                <Footer />\n              </> :\n              <div>Page access not authorized!</div>\n            }\n          </Route>\n          <Route path=\"/empty\">\n            <div>\n              Verification link sent to your email! <br />Please click on link to verify email....then <button><Link to=\"/\">Login</Link></button>\n            </div>\n          </Route>\n          <Route path=\"/\">\n            {homePage}\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\StateWrap.js",[],"C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\Reducer.js",[],"C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\Login.js",["64","65","66","67","68","69"],"import React, { useEffect, useState } from 'react';\r\nimport './Login.css';\r\nimport { Link, Redirect, useHistory } from 'react-router-dom';\r\nimport { auth } from './FirebaseConfig';\r\nimport { useStateValue } from './StateWrap';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction Login() {\r\n\r\n    const [{ userID }, dispatch] = useStateValue();\r\n    const [email, getEmail] = useState('');\r\n    const [password, getPassword] = useState('');\r\n\r\n    // method used to sign in existing user. it also checks if email is verified. if not it sends verification email.\r\n    const signIn = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        auth.signInWithEmailAndPassword(email, password)\r\n            .then(() => {\r\n                let user = auth.currentUser;\r\n                if (user.emailVerified) {\r\n\r\n                    localStorage.setItem(\"userID\", user.uid);\r\n\r\n                    dispatch({\r\n                        type: 'SET_USER',\r\n                        userID: user.uid\r\n                    })\r\n\r\n                    window.location.reload();\r\n                }\r\n                else {\r\n                    user.sendEmailVerification();\r\n                    alert(`Email not verified.\\nVerification link sent to ${email}.\\nPlease verify your email.`);\r\n                    auth.signOut();\r\n                }\r\n            }).catch((error) => alert(error.message));\r\n\r\n    };\r\n\r\n    // method to sign up user using firebase authentication method and send email verification link\r\n    const signUp = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        auth.createUserWithEmailAndPassword(email, password)\r\n            .then(() => {\r\n                let user = auth.currentUser;\r\n                user.sendEmailVerification()\r\n                    .then(function () {\r\n                        auth.signOut();\r\n                        alert(`Verification link sent to ${email}. \\n Please click on the link to verify your email.`);\r\n                    }).catch(function (e) {\r\n                        alert(e);\r\n                    });\r\n            })\r\n            .catch((error) => alert(error.message));\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"login row\">\r\n            <div className=\"login_image col-sm-6 d-none d-sm-block\">\r\n                <img alt=\"login image\" src={process.env.PUBLIC_URL + '/image/login.jpg'} />\r\n            </div>\r\n            <div className=\"login_form col-sm-6\">\r\n\r\n                <form>\r\n                    <h3>Welcome to Mock Trader</h3>\r\n                    Email<br />\r\n                    <input type=\"email\" size=\"22\" value={email} onChange={(e) => getEmail(e.target.value)} /><br /><br />\r\n                    Password<br />\r\n                    <input type=\"password\" size=\"22\" value={password} onChange={(e) => getPassword(e.target.value)} /><br /><br />\r\n                    <button type=\"submit\" onClick={signIn} className=\"login_signIn btn btn-success\">\r\n                            Sign In <i className=\"fa fa-sign-in\"></i>\r\n                    </button>\r\n                    <div className=\"divider\" />\r\n\r\n                    <button onClick={signUp} className=\"login_signUp btn btn-success\">\r\n                        <Link to=\"/empty\">\r\n                            Sign Up <i className=\"fa fa-user-plus\"></i>\r\n                        </Link>\r\n                    </button>\r\n\r\n\r\n                </form>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\FirebaseConfig.js",["70"]," \r\n import firebase from 'firebase';\r\n // Your web app's Firebase configuration\r\n  // For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyBwnAONdyUlykAZCi8q5EzJWxP5EHxGK3w\",\r\n    authDomain: \"mock-trader.firebaseapp.com\",\r\n    projectId: \"mock-trader\",\r\n    storageBucket: \"mock-trader.appspot.com\",\r\n    messagingSenderId: \"957707573896\",\r\n    appId: \"1:957707573896:web:b77f2a103f2d22f8b41d3d\",\r\n    measurementId: \"G-HKP4CNXBF9\"\r\n  };\r\n\r\n // Initialize Firebase\r\n const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n const auth = firebase.auth();\r\n\r\n export {auth}; \r\n //firebase.analytics();","C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\Header.js",[],"C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\Home.js",["71","72"],"import React, { useEffect } from 'react';\r\nimport './Home.css';\r\nimport { useStateValue } from './StateWrap';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction Home() {\r\n\r\n    const [{ watchlist, portfolio }, dispatch] = useStateValue();\r\n\r\n    // hook to load user data from server\r\n    useEffect(() => {\r\n    \r\n        if (localStorage.getItem(\"userID\")) {\r\n    \r\n          async function loadUserData() {\r\n            let url = 'https://mock-trader.glitch.me/loadData';\r\n            let res = await axios.post(url, { userID: localStorage.getItem(\"userID\") });\r\n            return res;\r\n          }\r\n    \r\n          dispatch({\r\n            type: 'TOGGLE_LOADING',\r\n            loadingDisplay: 'block'\r\n          })\r\n    \r\n          loadUserData()\r\n            .then(res => {\r\n              let data = res.data.data;\r\n              dispatch({\r\n                type: \"LOAD_DATA\",\r\n                data: {\r\n                  fund: data.fund,\r\n                  watchlist: data.watchlist,\r\n                  portfolio: data.portfolio,\r\n                  history: data.history\r\n                }\r\n              })\r\n    \r\n              dispatch({\r\n                type: 'TOGGLE_LOADING',\r\n                loadingDisplay: 'none'\r\n              })\r\n            })\r\n        }\r\n    \r\n      }, [])\r\n    \r\n    \r\n    // method used on investing and watchlist stock buttons. whenever the stocks are clicked they act as search stock function to display detail of stock.\r\n    const searchStock = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        const ticker = e.currentTarget.value;\r\n\r\n        dispatch({\r\n            type: 'TOGGLE_LOADING',\r\n            loadingDisplay: 'block'\r\n        })\r\n        async function searchTicker() {\r\n            let url = 'https://mock-trader.glitch.me/getPrice/' + ticker;\r\n            let res = await axios.get(url);\r\n            return res;\r\n        }\r\n        searchTicker()\r\n            .then((res => {\r\n\r\n                if (res.data.price == \"\") { alert(\"No such stock exists!\"); }\r\n                else {\r\n\r\n                    let shares = (portfolio.ticker.includes(ticker.toUpperCase()))? portfolio.shares[portfolio.ticker.indexOf(ticker.toUpperCase())] : 0;\r\n\r\n                    let cost = (portfolio.ticker.includes(ticker.toUpperCase())) ? portfolio.averageC[portfolio.ticker.indexOf(ticker.toUpperCase())] : 0;\r\n\r\n                    dispatch({\r\n                        type: 'SET_SEARCH',\r\n                        search: {\r\n                            price: res.data.price,\r\n                            plusButtonClass: (!watchlist.ticker.includes(ticker.toUpperCase())) ? 'fa fa-plus-square fa-3x' : 'fa fa-minus-square fa-3x',\r\n                            searchedTicker: ticker.toUpperCase(),\r\n                            shares: shares,\r\n                            averCost: cost\r\n                        }\r\n                    })\r\n                    dispatch({\r\n                        type: 'TOGGLE_LOADING',\r\n                        loadingDisplay: 'none'\r\n                    })\r\n                }\r\n\r\n            }))\r\n    }\r\n\r\n    // method to return a div containing a list of watchlist stockes with their price info loaded from app state \r\n    const watchlistDiv = watchlist.ticker.map((ticker, i) => {\r\n        return (\r\n            <div className=\"home_stock row\" key={i + 'wl'}>\r\n                    <button className=\"home_watchlist_button\" value={ticker} onClick={searchStock}>\r\n                    <Link to=\"/search\" className=\"home_watchlist_link\" >\r\n                        <div className=\"home_stock_ticker col-6\">\r\n                            {ticker}\r\n                        </div>\r\n                        <div className=\"home_stock_price col-6\">\r\n                            ${watchlist.price[i]}\r\n                        </div>\r\n                        </Link>\r\n                    </button>\r\n            </div>\r\n        );\r\n    })\r\n\r\n    // method to return a div containing a list of investing stockes with their price info loaded from app state \r\n    const investingDiv = portfolio.ticker.map((ticker, i) => {\r\n        return (\r\n            <div className=\"home_stock row\" key={i + 'in'}>\r\n                    <button className=\"home_watchlist_button\" value={ticker} onClick={searchStock}>\r\n                    <Link to=\"/search\" className=\"home_watchlist_link\" >\r\n                        <div className=\"home_stock_ticker col-6\">\r\n                            {ticker}\r\n                        </div>\r\n                        <div className=\"home_stock_price col-6\">\r\n                            ${portfolio.price[i]}\r\n                        </div>\r\n                        </Link>\r\n                    </button>\r\n            </div>\r\n        );\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"home container\">\r\n            <div className=\"home_row row\">\r\n                <div className=\"home_investing row\">\r\n                    <div className=\"home_header row\">\r\n                        <div className=\"home_header_title col-6\">\r\n                            Investing\r\n                            </div>\r\n                        <div className=\"home_header_icon col-6\">\r\n                            <i className=\"fa fa-line-chart\"></i>\r\n                        </div>\r\n                    </div>\r\n                    {investingDiv}\r\n                </div>\r\n                <div className=\"home_watchlist row\">\r\n                    <div className=\"home_header row\">\r\n                        <div className=\"home_header_title col-6\">\r\n                            Watchlist\r\n                            </div>\r\n                        <div className=\"home_header_icon col-6\">\r\n                            <i className=\"fa fa-bolt\"></i>\r\n                        </div>\r\n                    </div>\r\n                    {watchlistDiv}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\Footer.js",[],"C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\Search.js",["73","74","75"],"import React, { useState, useEffect } from 'react';\r\nimport './Search.css';\r\nimport axios from 'axios';\r\nimport { useStateValue } from './StateWrap';\r\n\r\n\r\nfunction Search() {\r\n    // various state variables\r\n    const [ticker, getTicker] = useState('');\r\n    const [{ userID, search, watchlist, fund, portfolio }, dispatch] = useStateValue();\r\n    const [trade, startTrade] = useState(['Trade', 'purple', 'hidden', 'hidden']);\r\n    const [shareBuy, getBuyShare] = useState('');\r\n    const [shareSell, getSellShare] = useState('');\r\n    const [limitPrice, getLimitPrice] = useState('');\r\n    const [limitOrder, getLimitOrder] = useState('');\r\n    const [priceChecked, isLimitPrice] = useState(false);\r\n    const [orderChecked, isLimitOrder] = useState(false);\r\n\r\n    // method to format numbers to two decimal digits\r\n    function formatNum(x) {\r\n        x = x.toFixed(2);\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n\r\n    // method used to open buy modal\r\n    function openBuy() {\r\n\r\n        // resetting the limitPrice checkbox and the limitPrice input box when reopening modal\r\n        if (document.getElementById('limitPrice').checked) {\r\n            document.getElementById('limitPrice').click();\r\n        }\r\n        if (document.getElementById('bShares').value) {\r\n            document.getElementById('bShares').value = '';\r\n            getBuyShare('');\r\n        }\r\n\r\n        window.$('#buyModal').modal('show');\r\n\r\n        dispatch({\r\n            type: 'TOGGLE_LOADING',\r\n            loadingDisplay: 'block'\r\n        })\r\n\r\n        // retrieving price data and loding it into app state when opening modal\r\n        async function searchTicker() {\r\n            let url = 'https://mock-trader.glitch.me/getPrice/' + search.searchedTicker;\r\n            let res = await axios.get(url);\r\n            return res;\r\n        }\r\n        searchTicker()\r\n            .then((res) => {\r\n\r\n                let shares = (portfolio.ticker.includes(ticker.toUpperCase())) ? portfolio.shares[portfolio.ticker.indexOf(ticker.toUpperCase())] : 0;\r\n\r\n                let cost = (portfolio.ticker.includes(ticker.toUpperCase())) ? portfolio.averageC[portfolio.ticker.indexOf(ticker.toUpperCase())] : 0;\r\n\r\n                dispatch({\r\n                    type: 'SET_SEARCH',\r\n                    search: {\r\n                        price: res.data.price,\r\n                        plusButtonClass: (!watchlist.ticker.includes(ticker.toUpperCase())) ? 'fa fa-plus-square fa-3x' : 'fa fa-minus-square fa-3x',\r\n                        searchedTicker: search.searchedTicker.toUpperCase(),\r\n                        shares: shares,\r\n                        averCost: cost\r\n                    }\r\n                })\r\n                dispatch({\r\n                    type: 'TOGGLE_LOADING',\r\n                    loadingDisplay: 'none'\r\n                })\r\n\r\n            })\r\n    }\r\n\r\n    // method used to open sell modal\r\n    function openSell() {\r\n\r\n        // resetting the limitOrder checkbox and the limitOrder input box when reopening modal\r\n        if (document.getElementById('limitOrder').checked) {\r\n            document.getElementById('limitOrder').click();\r\n        }\r\n        if (document.getElementById('sShares').value) {\r\n            document.getElementById('sShares').value = '';\r\n            getSellShare('');\r\n        }\r\n\r\n        window.$('#sellModal').modal('show');\r\n\r\n        dispatch({\r\n            type: 'TOGGLE_LOADING',\r\n            loadingDisplay: 'block'\r\n        })\r\n\r\n        // retrieving price data and loding it into app state when opening modal\r\n        async function searchTicker() {\r\n            let url = 'https://mock-trader.glitch.me/getPrice/' + search.searchedTicker;\r\n            let res = await axios.get(url);\r\n            return res;\r\n        }\r\n        searchTicker()\r\n            .then((res) => {\r\n\r\n                let shares = (portfolio.ticker.includes(ticker.toUpperCase())) ? portfolio.shares[portfolio.ticker.indexOf(ticker.toUpperCase())] : 0;\r\n\r\n                let cost = (portfolio.ticker.includes(ticker.toUpperCase())) ? portfolio.averageC[portfolio.ticker.indexOf(ticker.toUpperCase())] : 0;\r\n\r\n                dispatch({\r\n                    type: 'SET_SEARCH',\r\n                    search: {\r\n                        price: res.data.price,\r\n                        plusButtonClass: (!watchlist.ticker.includes(ticker.toUpperCase())) ? 'fa fa-plus-square fa-3x' : 'fa fa-minus-square fa-3x',\r\n                        searchedTicker: search.searchedTicker.toUpperCase(),\r\n                        shares: shares,\r\n                        averCost: cost\r\n                    }\r\n                })\r\n                dispatch({\r\n                    type: 'TOGGLE_LOADING',\r\n                    loadingDisplay: 'none'\r\n                })\r\n\r\n            })\r\n    }\r\n\r\n    // method used to process buy stock button\r\n    function buyStock(e) {\r\n\r\n        e.preventDefault();\r\n\r\n        if (!shareBuy.split(' ').join('') || parseFloat(shareBuy) <= 0) alert('Enter number of shares more than 0.');\r\n        else {\r\n\r\n            dispatch({\r\n                type: 'TOGGLE_LOADING',\r\n                loadingDisplay: 'block'\r\n            })\r\n\r\n            async function buyTicker() {\r\n                let res = await axios.post('https://mock-trader.glitch.me/buyTicker', { userID: localStorage.getItem(\"userID\"), ticker: search.searchedTicker, shares: parseFloat(shareBuy), limitPrice: parseFloat(limitPrice) })\r\n                return res;\r\n            }\r\n            buyTicker()\r\n                .then(res => {\r\n                    if (!res.data.success) {\r\n                        alert(res.data.message);\r\n\r\n                        dispatch({\r\n                            type: 'TOGGLE_LOADING',\r\n                            loadingDisplay: 'none'\r\n                        })\r\n                    }\r\n                    else {\r\n                        let data = res.data.data\r\n                        alert(data.message);\r\n                        dispatch({\r\n                            type: 'UPDATE_PORTFOLIO',\r\n                            portfolio: data.data.portfolio\r\n                        })\r\n                        dispatch({\r\n                            type: 'UPDATE_FUND',\r\n                            fund: data.data.fund\r\n                        })\r\n                        dispatch({\r\n                            type: 'UPDATE_HISTORY',\r\n                            history: data.data.history\r\n                        })\r\n                        window.$('#buyModal').modal('hide');\r\n                        getTicker(search.searchedTicker);\r\n                        document.getElementById('searchB').click();\r\n\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    // method used to process sell stock button\r\n    function sellStock(e) {\r\n\r\n        e.preventDefault();\r\n\r\n        if (!shareSell.split(' ').join('') || parseFloat(shareSell) <= 0) alert('Enter number of shares more than 0.');\r\n        else if (parseFloat(shareSell) > search.shares) alert(`You only have ${search.shares} shares!`);\r\n        else {\r\n            dispatch({\r\n                type: 'TOGGLE_LOADING',\r\n                loadingDisplay: 'block'\r\n            })\r\n\r\n            async function sellTicker() {\r\n                let res = await axios.post('https://mock-trader.glitch.me/sellTicker', { userID: localStorage.getItem(\"userID\"), ticker: search.searchedTicker, shares: parseFloat(shareSell), limitOrder: parseFloat(limitOrder) })\r\n                return res;\r\n            }\r\n            sellTicker()\r\n                .then(res => {\r\n                    if (!res.data.success) {\r\n                        alert(res.data.message);\r\n\r\n                        dispatch({\r\n                            type: 'TOGGLE_LOADING',\r\n                            loadingDisplay: 'none'\r\n                        })\r\n                    }\r\n                    else {\r\n                        let data = res.data.data;\r\n                        alert(data.message);\r\n                        dispatch({\r\n                            type: 'UPDATE_PORTFOLIO',\r\n                            portfolio: data.data.portfolio\r\n                        })\r\n                        dispatch({\r\n                            type: 'UPDATE_FUND',\r\n                            fund: data.data.fund\r\n                        })\r\n                        dispatch({\r\n                            type: 'UPDATE_HISTORY',\r\n                            history: data.data.history\r\n                        })\r\n                        window.$('#sellModal').modal('hide');\r\n                        getTicker(search.searchedTicker);\r\n                        document.getElementById('searchB').click();\r\n                    }\r\n                })\r\n        }\r\n\r\n\r\n    }\r\n\r\n    // method used to update the stock watchlist\r\n    const updateWatchlist = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        dispatch({\r\n            type: 'TOGGLE_LOADING',\r\n            loadingDisplay: 'block'\r\n        })\r\n\r\n        if (!watchlist.ticker.includes(search.searchedTicker.toUpperCase())) {\r\n            watchlist.ticker.push(search.searchedTicker.toUpperCase());\r\n        }\r\n        else {\r\n            let index = watchlist.ticker.indexOf(search.searchedTicker.toUpperCase());\r\n            watchlist.ticker.splice(index, 1);\r\n        }\r\n\r\n        async function setWatchlist() {\r\n            let res = await axios.post('https://mock-trader.glitch.me/updateWatchlist', { userID: localStorage.getItem(\"userID\"), newWatchlist: watchlist })\r\n            return res;\r\n        }\r\n        setWatchlist()\r\n            .then((res) => {\r\n                search.plusButtonClass = (!res.data.watchlist.ticker.includes(search.searchedTicker.toUpperCase())) ? 'fa fa-plus-square fa-3x' : 'fa fa-minus-square fa-3x';\r\n                dispatch({\r\n                    type: 'UPDATE_WATCHLIST',\r\n                    watchlist: res.data.watchlist,\r\n                })\r\n                dispatch({\r\n                    type: 'TOGGLE_LOADING',\r\n                    loadingDisplay: 'none'\r\n                })\r\n            })\r\n    }\r\n\r\n    // method used to handle the search stock button\r\n    const searchStock = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        if (!ticker.split(' ').join('')) alert('ticker field is empty');\r\n        else {\r\n\r\n            dispatch({\r\n                type: 'TOGGLE_LOADING',\r\n                loadingDisplay: 'block'\r\n            })\r\n\r\n            async function searchTicker() {\r\n                let url = 'https://mock-trader.glitch.me/getPrice/' + ticker;\r\n                let res = await axios.get(url);\r\n                return res;\r\n            }\r\n            searchTicker()\r\n                .then((res => {\r\n\r\n                    if (res.data.price == \"\") {\r\n                        alert(\"No such stock exists!\");\r\n                        dispatch({\r\n                            type: 'TOGGLE_LOADING',\r\n                            loadingDisplay: 'none'\r\n                        })\r\n                    }\r\n                    else {\r\n\r\n                        let shares = (portfolio.ticker.includes(ticker.toUpperCase())) ? portfolio.shares[portfolio.ticker.indexOf(ticker.toUpperCase())] : 0;\r\n\r\n                        let cost = (portfolio.ticker.includes(ticker.toUpperCase())) ? portfolio.averageC[portfolio.ticker.indexOf(ticker.toUpperCase())] : 0;\r\n\r\n                        dispatch({\r\n                            type: 'SET_SEARCH',\r\n                            search: {\r\n                                price: res.data.price,\r\n                                plusButtonClass: (!watchlist.ticker.includes(ticker.toUpperCase())) ? 'fa fa-plus-square fa-3x' : 'fa fa-minus-square fa-3x',\r\n                                searchedTicker: ticker.toUpperCase(),\r\n                                shares: shares,\r\n                                averCost: cost\r\n                            }\r\n                        })\r\n                        dispatch({\r\n                            type: 'TOGGLE_LOADING',\r\n                            loadingDisplay: 'none'\r\n                        })\r\n                        startTrade(['Trade', 'purple', 'hidden', 'hidden']);\r\n                    }\r\n\r\n                }))\r\n        }\r\n\r\n\r\n    }\r\n\r\n    // hook to reload data from server and put it into app state.\r\n    useEffect(() => {\r\n\r\n        if (localStorage.getItem(\"userID\")) {\r\n\r\n            async function loadUserData() {\r\n                let url = 'https://mock-trader.glitch.me/loadData';\r\n                let res = await axios.post(url, { userID: localStorage.getItem(\"userID\") });\r\n                return res;\r\n            }\r\n\r\n            dispatch({\r\n                type: 'TOGGLE_LOADING',\r\n                loadingDisplay: 'block'\r\n            })\r\n\r\n            loadUserData()\r\n                .then(res => {\r\n                    let data = res.data.data;\r\n                    dispatch({\r\n                        type: \"LOAD_DATA\",\r\n                        data: {\r\n                            fund: data.fund,\r\n                            watchlist: data.watchlist,\r\n                            portfolio: data.portfolio,\r\n                            history: data.history\r\n                        }\r\n                    })\r\n\r\n                    dispatch({\r\n                        type: 'TOGGLE_LOADING',\r\n                        loadingDisplay: 'none'\r\n                    })\r\n                })\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"search container\">\r\n            <div className=\"search_row row\">\r\n                <div className=\"search_input_section row\">\r\n                    <input className=\"search_input\" type=\"text\" value={ticker} onChange={(e) => getTicker(e.target.value)} placeholder=\"stock ticker symbol\"></input><button className=\"search_button\" onClick={searchStock} id=\"searchB\"><i className=\"fa fa-search\" ></i></button>\r\n                </div>\r\n                {(search.searchedTicker) ?\r\n                    (\r\n                        <>\r\n                            <div className=\"search_header row\">\r\n                                <div className=\"search_header_detail col-6\">\r\n                                    <div className=\"search_header_title row\">\r\n                                        {search.searchedTicker}\r\n                                    </div>\r\n                                    <div className=\"search_header_price row\">\r\n                                        ${search.price}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"search_add col-6\">\r\n                                    <button className=\"search_add_button\" onClick={updateWatchlist}>\r\n                                        <i className={search.plusButtonClass}></i>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"search_position row\">\r\n                                <div className=\"search_position_title col-12\">\r\n                                    POSITION\r\n             </div>\r\n                                <div className=\"search_shares col-6\">\r\n                                    <div className=\"search_shares_top row\">\r\n                                        Shares\r\n                 </div>\r\n                                    <div className=\"search_shares_bottom row\">\r\n                                        {search.shares}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"search_value col-6\">\r\n                                    <div className=\"search_value_top row\">\r\n                                        Market Value\r\n                 </div>\r\n                                    <div className=\"search_value_bottom row\">\r\n                                        ${formatNum(search.shares * parseFloat(search.price.replace(',', '')))}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"search_cost col-12\">\r\n                                    <div className=\"search_cost_top row\">\r\n                                        Average Cost\r\n                 </div>\r\n                                    <div className=\"search_cost_bottom row\">\r\n                                        ${formatNum(search.averCost)}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"search_return col-6\">\r\n                                    <div className=\"search_return_top row\">\r\n                                        Total Return\r\n                 </div>\r\n                                    <div className=\"search_return_bottom row\">\r\n                                        ${formatNum(search.shares * (parseFloat(search.price.replace(',', '')) - search.averCost))}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"search_trade col-6\">\r\n                                    <button className=\"search_trade_button search_sell\" style={{ visibility: trade[3] }} onClick={openSell}>\r\n                                        Sell\r\n                             </button>\r\n                                    <button className=\"search_trade_button search_buy\" style={{ visibility: trade[2] }} onClick={openBuy}>\r\n                                        Buy\r\n                             </button>\r\n                                    <button className=\"search_trade_button search_trade_b\" style={{ backgroundColor: trade[1] }} onClick={() => startTrade((trade[0] === 'Trade') ? ['X', 'grey', '', (search.shares) ? '' : 'hidden'] : ['Trade', 'purple', 'hidden', 'hidden'])}>\r\n                                        {trade[0]}\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    ) : null\r\n                }\r\n\r\n                <div className=\"modal\" role=\"dialog\" id=\"buyModal\">\r\n                    <div className=\"modal-dialog\" role=\"document\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header row\">\r\n                                <h3 className=\"modal-title\">Buy {search.searchedTicker}</h3>\r\n                                <button type=\"button\" className=\"close modal_close_button\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                    <span aria-hidden=\"true\" className=\"modal_x\">&times;</span>\r\n                                </button>\r\n                                <p className=\"modal_fund col-12\">${(fund) ? formatNum(fund) : \"\"} available</p>\r\n\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <div className=\"modal_share\">\r\n                                    <div className=\"modal_share_text\">Number of Shares</div>\r\n                                    <div className=\"modal_share_input\">\r\n                                        <input type=\"number\" placeholder=\"0\" id='bShares' onChange={(e) => getBuyShare(e.target.value)}></input>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"modal_price\">\r\n                                    <div className=\"modal_price_text\">\r\n                                        Market Price\r\n                                    </div>\r\n                                    <div className=\"modal_price_num\">${search.price}</div>\r\n                                </div>\r\n                                <div className=\"modal_cost\">\r\n                                    <div className=\"modal_cost_text\">Estimated Cost</div>\r\n                                    <div className=\"modal_cost_num\">${(shareBuy) ? formatNum(shareBuy * parseFloat(search.price.replace(',', ''))) : 0}</div>\r\n                                </div>\r\n                                <div className=\"modal_limit\">\r\n                                    <div className=\"modal_limit_check\">\r\n                                        <label >Limit Price</label>\r\n                                        <input type=\"checkbox\" id=\"limitPrice\" onChange={(e) => {\r\n                                            if (!e.target.checked) {\r\n                                                getLimitPrice('');\r\n                                                document.getElementById('ptext').value = '';\r\n                                            }\r\n                                            return isLimitPrice(e.target.checked)\r\n                                        }}></input>\r\n                                    </div>\r\n                                    <div className=\"modal_limit_input\">\r\n                                        <input type=\"number\" min=\"0\" placeholder=\"$\" id='ptext' onChange={(e) => getLimitPrice(e.target.value)} style={{ backgroundColor: !priceChecked ? 'darkgrey' : 'lightgreen' }} disabled={!priceChecked ? true : false}></input>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Cancel</button>\r\n                                <button type=\"button\" className=\"btn btn-success\" onClick={buyStock}>Buy</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"modal\" role=\"dialog\" id=\"sellModal\">\r\n                    <div className=\"modal-dialog\" role=\"document\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header row\">\r\n                                <h3 className=\"modal-title\">Sell {search.searchedTicker}</h3>\r\n                                <button type=\"button\" className=\"close modal_close_button\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                    <span aria-hidden=\"true\" className=\"modal_x\">&times;</span>\r\n                                </button>\r\n                                <p className=\"modal_fund col-12\">{search.shares} shares available</p>\r\n\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <div className=\"modal_share\">\r\n                                    <div className=\"modal_share_text\">Number of Shares</div>\r\n                                    <div className=\"modal_share_input\">\r\n                                        <input type=\"number\" placeholder=\"0\" id='sShares' onChange={(e) => getSellShare(e.target.value)}></input>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"modal_price\">\r\n                                    <div className=\"modal_price_text\">\r\n                                        Market Price\r\n                                    </div>\r\n                                    <div className=\"modal_price_num\">${search.price}</div>\r\n                                </div>\r\n                                <div className=\"modal_cost\">\r\n                                    <div className=\"modal_cost_text\">Estimated Credit</div>\r\n                                    <div className=\"modal_cost_num\">${(shareSell) ? formatNum(shareSell * parseFloat(search.price.replace(',', ''))) : 0}</div>\r\n                                </div>\r\n                                <div className=\"modal_limit\">\r\n                                    <div className=\"modal_limit_check\">\r\n                                        <label >Limit Order</label>\r\n                                        <input type=\"checkbox\" id=\"limitOrder\" onChange={(e) => {\r\n                                            if (!e.target.checked) {\r\n                                                getLimitOrder('');\r\n                                                document.getElementById('oText').value = '';\r\n                                            }\r\n                                            return isLimitOrder(e.target.checked)\r\n                                        }} ></input>\r\n                                    </div>\r\n                                    <div className=\"modal_limit_input\">\r\n                                        <input type=\"number\" placeholder=\"$\" id='oText' onChange={(e) => getLimitOrder(e.target.value)} style={{ backgroundColor: !orderChecked ? 'darkgrey' : 'lightgreen' }} disabled={!orderChecked ? true : false}></input>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Cancel</button>\r\n                                <button type=\"button\" className=\"btn btn-success\" onClick={sellStock}>Sell</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\History.js",["76"],"import React, { useEffect } from 'react';\r\nimport './History.css';\r\nimport { useStateValue } from './StateWrap';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n\r\nfunction History() {\r\n\r\n    const [{ history, loadingDisplay }, dispatch] = useStateValue();\r\n\r\n    // method for format numbers to two decimal digits.\r\n    function formatNum(x) {\r\n        x = x.toFixed(2);\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    };\r\n\r\n    // method to loop through the history object and return a list of history divs to display.\r\n    const historyDiv = (history.ticker.length !== 0) ? history.ticker.map((ticker, i) => {\r\n\r\n        let d = new Date(history.date[i]);\r\n\r\n        // changing UTC timezone to western hemsphere\r\n        d = new Date(d.getTime() - ( d.getTimezoneOffset()*60000 )).toDateString();\r\n\r\n        return (\r\n            <div className=\"history_list row\" key={i + \"hist\"}>\r\n                <div className=\"history_list_top row\">\r\n                    <div className=\"history_list_stock col-6\">\r\n                        {ticker}: {history.limit[i]}\r\n                    </div>\r\n                    <div className=\"history_list_price col-6\">\r\n                        {(history.value[i] < 0) ? `-$${formatNum(Math.abs(history.value[i]))}` : `$${formatNum(history.value[i])}`}\r\n                    </div>\r\n                </div>\r\n                <div className=\"history_list_bottom row\">\r\n                    <div className=\"history_list_date col-6\">\r\n                        {d}\r\n                    </div>\r\n                    <div className=\"history_list_value col-6\">\r\n                        {`${history.shares[i]} shares @ $${history.price[i]}`}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }) :\r\n        <div className=\"history_list row\">\r\n           {(loadingDisplay === 'block')? \"\" : <>You Have No History. <br /> Go Make Some!!</>} \r\n        </div>\r\n        ;\r\n\r\n    // hook to reload info from server\r\n    useEffect(() => {\r\n\r\n        console.log(localStorage.getItem(\"userID\"));\r\n\r\n        if (localStorage.getItem(\"userID\")) {\r\n\r\n            async function loadUserData() {\r\n                let url = 'https://mock-trader.glitch.me/loadData';\r\n                console.log(url);\r\n                let res = await axios.post(url, { userID: localStorage.getItem(\"userID\") });\r\n                return res;\r\n            }\r\n\r\n            dispatch({\r\n                type: 'TOGGLE_LOADING',\r\n                loadingDisplay: 'block'\r\n            })\r\n\r\n            loadUserData()\r\n                .then(res => {\r\n                    let data = res.data.data;\r\n                    console.log(data.watchlist, data.portfolio, data.history);\r\n                    dispatch({\r\n                        type: \"LOAD_DATA\",\r\n                        data: {\r\n                            fund: data.fund,\r\n                            watchlist: data.watchlist,\r\n                            portfolio: data.portfolio,\r\n                            history: data.history\r\n                        }\r\n                    })\r\n\r\n                    dispatch({\r\n                        type: 'TOGGLE_LOADING',\r\n                        loadingDisplay: 'none'\r\n                    })\r\n                })\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"history container\">\r\n            <div className=\"history_row row\">\r\n                <div className=\"history_section row\">\r\n                    <div className=\"history_header row\">\r\n                        History\r\n                    </div>\r\n                    {historyDiv}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default History;","C:\\Users\\Dag\\Documents\\webdev\\javascript\\React\\react_app\\mock-trader\\mock-trader-client\\src\\components\\Loading.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":10,"column":10,"nodeType":"83","messageId":"84","endLine":10,"endColumn":19},{"ruleId":"81","severity":1,"message":"82","line":1,"column":17,"nodeType":"83","messageId":"84","endLine":1,"endColumn":26},{"ruleId":"81","severity":1,"message":"85","line":3,"column":16,"nodeType":"83","messageId":"84","endLine":3,"endColumn":24},{"ruleId":"81","severity":1,"message":"86","line":3,"column":26,"nodeType":"83","messageId":"84","endLine":3,"endColumn":36},{"ruleId":"81","severity":1,"message":"87","line":6,"column":8,"nodeType":"83","messageId":"84","endLine":6,"endColumn":13},{"ruleId":"81","severity":1,"message":"88","line":11,"column":14,"nodeType":"83","messageId":"84","endLine":11,"endColumn":20},{"ruleId":"89","severity":1,"message":"90","line":66,"column":17,"nodeType":"91","endLine":66,"endColumn":92},{"ruleId":"81","severity":1,"message":"92","line":16,"column":8,"nodeType":"83","messageId":"84","endLine":16,"endColumn":19},{"ruleId":"93","severity":1,"message":"94","line":48,"column":10,"nodeType":"95","endLine":48,"endColumn":12,"suggestions":"96"},{"ruleId":"97","severity":1,"message":"98","line":70,"column":36,"nodeType":"99","messageId":"100","endLine":70,"endColumn":38},{"ruleId":"81","severity":1,"message":"88","line":10,"column":14,"nodeType":"83","messageId":"84","endLine":10,"endColumn":20},{"ruleId":"97","severity":1,"message":"98","line":286,"column":40,"nodeType":"99","messageId":"100","endLine":286,"endColumn":42},{"ruleId":"93","severity":1,"message":"94","line":358,"column":8,"nodeType":"95","endLine":358,"endColumn":10,"suggestions":"101"},{"ruleId":"93","severity":1,"message":"94","line":93,"column":8,"nodeType":"95","endLine":93,"endColumn":10,"suggestions":"102"},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'useHistory' is defined but never used.","'axios' is defined but never used.","'userID' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'firebaseApp' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["105"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["106"],["107"],"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"108","fix":"110"},{"desc":"108","fix":"111"},"Update the dependencies array to be: [dispatch]",{"range":"112","text":"113"},{"range":"114","text":"113"},{"range":"115","text":"113"},[1319,1321],"[dispatch]",[13465,13467],[3271,3273]]